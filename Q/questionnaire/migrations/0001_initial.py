# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import Q.questionnaire.models.models_ontologies
import Q.questionnaire.q_utils
import Q.questionnaire.q_fields_bak
import Q.questionnaire.q_fields
import mptt.fields
from django.conf import settings
import django.db.models.deletion
import Q.questionnaire.models.models_projects
import Q.questionnaire.models.models_vocabularies
import Q.questionnaire.models.models_categorizations
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MetadataModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(null=True, editable=False, blank=True)),
                ('last_modified', models.DateTimeField(null=True, editable=False, blank=True)),
                ('guid', models.CharField(max_length=128, unique=True, null=True, editable=False, blank=True)),
                ('document_version', models.CharField(default=b'0.0', max_length=128)),
                ('is_document', models.BooleanField(default=False)),
                ('is_root', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=False)),
                ('vocabulary_key', models.CharField(max_length=512, null=True, blank=True)),
                ('component_key', models.CharField(max_length=512, null=True, blank=True)),
                ('title', models.CharField(max_length=512, null=True, blank=True)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=256)),
                ('description', models.CharField(max_length=1024, null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name='children', blank=True, to='questionnaire.MetadataModel', null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': '(DISABLE ADMIN ACCESS SOON) Metadata Model',
                'verbose_name_plural': '(DISABLE ADMIN ACCESS SOON) Metadata Models',
            },
        ),
        migrations.CreateModel(
            name='MetadataScientificProperty',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=256)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('field_type', models.CharField(blank=True, max_length=64, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration'), (b'PROPERTY', b'Property')])),
                ('is_label', models.BooleanField(default=False)),
                ('is_enumeration', models.BooleanField(default=False)),
                ('category_key', models.CharField(max_length=512, null=True, blank=True)),
                ('atomic_value', models.CharField(max_length=1024, null=True, blank=True)),
                ('enumeration_value', Q.questionnaire.q_fields_bak.EnumerationField(null=True, blank=True)),
                ('enumeration_other_value', models.CharField(max_length=1024, null=True, blank=True)),
                ('extra_standard_name', models.CharField(max_length=512, null=True, blank=True)),
                ('extra_description', models.TextField(null=True, blank=True)),
                ('extra_units', models.CharField(max_length=512, null=True, blank=True)),
                ('model', models.ForeignKey(related_name='scientific_properties', to='questionnaire.MetadataModel', null=True)),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
                'verbose_name': '(DISABLE ADMIN ACCESS SOON) Metadata Scientific Property',
                'verbose_name_plural': '(DISABLE ADMIN ACCESS SOON) Metadata Scientific Properties',
            },
        ),
        migrations.CreateModel(
            name='MetadataStandardProperty',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=256)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('field_type', models.CharField(blank=True, max_length=64, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration'), (b'PROPERTY', b'Property')])),
                ('is_label', models.BooleanField(default=False)),
                ('atomic_value', models.CharField(max_length=1024, null=True, blank=True)),
                ('enumeration_value', Q.questionnaire.q_fields_bak.EnumerationField(null=True, blank=True)),
                ('enumeration_other_value', models.CharField(max_length=1024, null=True, blank=True)),
                ('relationship_reference', Q.questionnaire.q_fields_bak.ListField(null=True, blank=True)),
                ('model', models.ForeignKey(related_name='standard_properties', to='questionnaire.MetadataModel', null=True)),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
                'verbose_name': '(DISABLE ADMIN ACCESS SOON) Metadata Standard Property',
                'verbose_name_plural': '(DISABLE ADMIN ACCESS SOON) Metadata Standard Properties',
            },
        ),
        migrations.CreateModel(
            name='QCategorization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=128)),
                ('version', Q.questionnaire.q_fields.QVersionField(null=True, blank=True)),
                ('description', models.TextField(null=True, blank=True)),
                ('file', Q.questionnaire.q_fields.QFileField(help_text=b'Note that files with the same names will be overwritten', storage=Q.questionnaire.q_fields.OverwriteStorage(), upload_to=b'questionnaire/categorizations', validators=[Q.questionnaire.models.models_categorizations.validate_categorization_file_extension, Q.questionnaire.models.models_categorizations.validate_categorization_file_schema])),
                ('is_registered', models.BooleanField(default=False)),
                ('last_registered_version', Q.questionnaire.q_fields.QVersionField(null=True, blank=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
                'verbose_name': 'Questionnaire Categorization',
                'verbose_name_plural': 'Questionnaire Categorizations',
            },
        ),
        migrations.CreateModel(
            name='QComponentProxy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=256)),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name='children', blank=True, to='questionnaire.QComponentProxy', null=True)),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': 'Questionnaire Component Proxy',
                'verbose_name_plural': '_Questionnaire Proxies: Components',
            },
        ),
        migrations.CreateModel(
            name='QModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('version', models.CharField(default=b'0.0', max_length=128)),
                ('name', models.CharField(max_length=128, blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_document', models.BooleanField(default=False)),
                ('is_root', models.BooleanField(default=False)),
                ('is_complete', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
                'verbose_name': 'Questionnaire Model Realization',
                'verbose_name_plural': '_Questionnaire Realizations: Models',
            },
        ),
        migrations.CreateModel(
            name='QModelCustomization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(help_text=b'A unique name for this customization.  Spaces or the following characters are not allowed: "\\, /, <, >, %, #, %, {, }, [, ], $, |".', max_length=128, verbose_name=b'Customization Name', validators=[Q.questionnaire.q_utils.ValidateNoBadChars(), Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoReservedWords(), Q.questionnaire.q_utils.ValidateNoProfanities()])),
                ('description', models.TextField(help_text=b'An explanation of how this customization is intended to be used. This information is for informational purposes only.', verbose_name=b'Customization Description', blank=True)),
                ('is_default', models.BooleanField(default=False, help_text=b'Every CIM Document Type must have one default customization. If this is the first customization you are creating, please ensure this checkbox is selected.', verbose_name=b'Is Default Customization?')),
                ('model_title', models.CharField(max_length=512, null=True, verbose_name=b'Name that should appear on the Document Form')),
                ('model_description', models.TextField(help_text=b'This text will appear as documentation in the editing form.  Inline HTML formatting is permitted.  The initial documentation comes from the ontology.', null=True, verbose_name=b'A description of the document', blank=True)),
                ('model_show_all_categories', models.BooleanField(default=False, help_text=b'Include categories in the editing form for which there are no (visible) properties associated with', verbose_name=b'Display empty categories?')),
                ('model_show_hierarchy', models.BooleanField(default=True, help_text=b'A CIM Document that uses 1 or 0 CVs does not need a root component acting as a <i>parent</i> of all components.', verbose_name=b'Nest the full document hierarchy within a root document?')),
                ('model_hierarchy_name', models.CharField(default=b'Component Hierarchy', help_text=b'What should the title be for the widget that navigates the document hierarchy?', max_length=128, verbose_name=b'Title of the document hierarchy tree')),
                ('model_root_component', models.CharField(default=b'RootComponent', max_length=128, verbose_name=b'Name of the root component', blank=True, validators=[Q.questionnaire.q_utils.ValidateNoSpaces()])),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Model Customization',
                'verbose_name_plural': '_Questionnaire Customizations: Models',
            },
        ),
        migrations.CreateModel(
            name='QModelCustomizationVocabulary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('order', models.PositiveIntegerField(default=1)),
                ('active', models.BooleanField(default=False)),
                ('model_customization', models.ForeignKey(related_name='link_to_model_customization', to='questionnaire.QModelCustomization')),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
                'verbose_name': 'Questionnaire Vocabulary Customization',
                'verbose_name_plural': '_Questionnaire Customizations: Vocabularies',
            },
        ),
        migrations.CreateModel(
            name='QModelProxy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=256)),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('stereotype', models.CharField(blank=True, max_length=512, null=True, choices=[('document', b'document')])),
                ('namespace', models.CharField(max_length=512, null=True, blank=True)),
                ('package', models.CharField(max_length=512, null=True, blank=True)),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': 'Questionnaire Model Proxy',
                'verbose_name_plural': '_Questionnaire Proxies: Models',
            },
        ),
        migrations.CreateModel(
            name='QOntology',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=128, validators=[Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoBadChars()])),
                ('version', Q.questionnaire.q_fields.QVersionField()),
                ('description', models.TextField(null=True, blank=True)),
                ('type', models.CharField(max_length=128, choices=[(b'CIM1', b'CIM 1.x'), (b'CIM2', b'CIM 2.x')])),
                ('key', models.CharField(max_length=256, editable=False)),
                ('url', models.URLField(help_text=b'This URL may be used as the namespace of serialized XML documents')),
                ('file', Q.questionnaire.q_fields.QFileField(help_text=b'Note that files with the same names will be overwritten', storage=Q.questionnaire.q_fields.OverwriteStorage(), upload_to=b'questionnaire/ontologies', validators=[Q.questionnaire.models.models_ontologies.validate_ontology_file_extension, Q.questionnaire.models.models_ontologies.validate_ontology_file_schema])),
                ('is_registered', models.BooleanField(default=False)),
                ('last_registered_version', Q.questionnaire.q_fields.QVersionField(null=True, blank=True)),
                ('categorization', models.ForeignKey(related_name='ontologies', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='questionnaire.QCategorization', null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Ontology',
                'verbose_name_plural': 'Questionnaire Ontologies',
            },
        ),
        migrations.CreateModel(
            name='QProject',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128, validators=[Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoBadChars(), Q.questionnaire.q_utils.ValidateNoReservedWords()])),
                ('title', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True)),
                ('email', models.EmailField(max_length=254, verbose_name=b'Contact Email', blank=True)),
                ('url', models.URLField(blank=True)),
                ('logo', models.ImageField(help_text=b'All images will be resized to 96 x 96.', storage=Q.questionnaire.q_fields.OverwriteStorage(), upload_to=Q.questionnaire.models.models_projects.generate_upload_to, blank=True)),
                ('display_logo', models.BooleanField(default=False)),
                ('authenticated', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Project',
                'verbose_name_plural': 'Questionnaire Projects',
            },
        ),
        migrations.CreateModel(
            name='QProjectVocabulary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('project', models.ForeignKey(related_name='+', to='questionnaire.QProject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QPublication',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=64)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('version', models.IntegerField()),
                ('format', models.CharField(max_length=128, choices=[(b'ESDOC_XML', b'ES-DOC XML'), (b'CIM_XML', b'CIM XML')])),
                ('content', models.TextField()),
                ('model', models.ForeignKey(related_name='publications', to='questionnaire.MetadataModel')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Publication',
                'verbose_name_plural': 'Questionnaire Publications',
            },
        ),
        migrations.CreateModel(
            name='QScientificCategoryCustomization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(help_text=b"Be wary of changing a category's name; doing so deviates from a known controlled vocabulary and could confuse users.", max_length=256)),
                ('description', models.TextField(null=True, verbose_name=b'Category Description', blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('vocabulary_key', models.UUIDField()),
                ('component_key', models.UUIDField()),
                ('model_customization', models.ForeignKey(related_name='scientific_category_customizations', to='questionnaire.QModelCustomization')),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
                'verbose_name': 'Questionnaire Scientific Category Customization',
                'verbose_name_plural': '_Questionnaire Customizations: Scientific Categories',
            },
        ),
        migrations.CreateModel(
            name='QScientificCategoryProxy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=256)),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('key', models.CharField(blank=True, max_length=256, validators=[Q.questionnaire.q_utils.ValidateNoSpaces()])),
                ('component_proxy', models.ForeignKey(related_name='category_proxies', to='questionnaire.QComponentProxy')),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': 'Questionnaire Scientific Category Proxy',
                'verbose_name_plural': '_Questionnaire Proxies: Scientific Categories',
            },
        ),
        migrations.CreateModel(
            name='QScientificProperty',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('field_type', models.CharField(max_length=128, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('model', models.ForeignKey(related_name='scientific_properties', to='questionnaire.QModel')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Scientific Property Realization',
                'verbose_name_plural': '_Questionnaire Realizations: Scientific Properties',
            },
        ),
        migrations.CreateModel(
            name='QScientificPropertyCustomization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=256)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('cardinality', Q.questionnaire.q_fields.QCardinalityField(default=b'0|1', max_length=8)),
                ('field_type', models.CharField(max_length=256, null=True, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('displayed', models.BooleanField(default=True, help_text='A property that is defined as required <em>in the CIM or a CV</em> must be displayed.', verbose_name=b'Should this property be displayed?')),
                ('required', models.BooleanField(default=True, help_text='All required properties must be completed prior to publication.  A property that is defined as required <em>in the CIM or a CV</em> cannot be made optional.', verbose_name=b'Is this property required?')),
                ('editable', models.BooleanField(default=True, verbose_name=b'Can the value of this property be edited?')),
                ('unique', models.BooleanField(default=False, verbose_name=b'Must the value of this property be unique?')),
                ('verbose_name', models.CharField(max_length=128, verbose_name=b'How should this property be labeled (overrides default name)?')),
                ('documentation', models.TextField(null=True, verbose_name="What is the help text to associate with this property?<div class='documentation'>Any initial help text comes from the CIM Schema or a CIM Controlled Vocabulary.</div><div class='documentation'>Note that basic HTML tags are supported.</div>", blank=True)),
                ('inline_help', models.BooleanField(default=False, verbose_name=b'Should the help text be displayed inline?')),
                ('vocabulary_key', models.UUIDField()),
                ('component_key', models.UUIDField()),
                ('choice', models.CharField(blank=True, max_length=128, null=True, choices=[(b'XOR', b'XOR'), (b'OR', b'OR'), (b'keyboard', b'keyboard')])),
                ('display_extra_standard_name', models.BooleanField(default=False)),
                ('display_extra_description', models.BooleanField(default=False)),
                ('display_extra_units', models.BooleanField(default=False)),
                ('edit_extra_standard_name', models.BooleanField(default=False)),
                ('edit_extra_description', models.BooleanField(default=False)),
                ('edit_extra_units', models.BooleanField(default=False)),
                ('atomic_default', models.CharField(max_length=512, null=True, verbose_name="What is the default value of this property?<div class='documentation'>Note that this only applies to new and not existing documents</div>", blank=True)),
                ('atomic_type', models.CharField(default=b'DEFAULT', help_text=b'By default, all fields are rendered as strings.  However, a field can be customized to accept longer snippets of text, dates, email addresses, etc.', max_length=512, verbose_name=b'How should this field be rendered?', choices=[(b'DEFAULT', b'Character Field (default)'), (b'BOOLEAN', b'Boolean Field'), (b'DATE', b'Date Field'), (b'DATETIME', b'Date Time Field'), (b'DECIMAL', b'Decimal Field'), (b'EMAIL', b'Email Field'), (b'INTEGER', b'Integer Field'), (b'TEXT', b'Text Field (large block of text as opposed to a small string)'), (b'TIME', b'Time Field'), (b'URL', b'URL Field')])),
                ('atomic_suggestions', models.TextField(help_text=b'Please enter a "|" separated list of words or phrases.  (These suggestions will only take effect for text fields.)', null=True, verbose_name=b'Are there any suggestions you would like to offer as auto-completion options?', blank=True)),
                ('enumeration_choices', Q.questionnaire.q_fields.QEnumerationField(null=True, verbose_name=b'Choose the property values that should be presented to users.', blank=True)),
                ('enumeration_default', Q.questionnaire.q_fields.QEnumerationField(null=True, verbose_name=b'Choose the default value(s), if any, for this property.', blank=True)),
                ('enumeration_open', models.BooleanField(default=False, verbose_name=b'Check if a user can specify a custom property value.')),
                ('enumeration_multi', models.BooleanField(default=False, verbose_name=b'Check if a user can specify multiple property values.')),
                ('enumeration_nullable', models.BooleanField(default=False, verbose_name=b'Check if a user can specify an explicit <em>NONE</em> value.')),
                ('category', models.ForeignKey(related_name='scientific_properties', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='questionnaire.QScientificCategoryCustomization', null=True)),
                ('model_customization', models.ForeignKey(related_name='scientific_properties', to='questionnaire.QModelCustomization')),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
                'verbose_name': 'Questionnaire Scientific Property Customization',
                'verbose_name_plural': '_Questionnaire Customizations: Scientific Properties',
            },
        ),
        migrations.CreateModel(
            name='QScientificPropertyProxy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=256)),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('cardinality', Q.questionnaire.q_fields.QCardinalityField(default=b'0|1', max_length=8)),
                ('field_type', models.CharField(max_length=256, null=True, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('choice', models.CharField(blank=True, max_length=128, null=True, choices=[(b'XOR', b'XOR'), (b'OR', b'OR'), (b'keyboard', b'keyboard')])),
                ('atomic_default', models.CharField(max_length=512, null=True, blank=True)),
                ('atomic_type', models.CharField(blank=True, max_length=128, null=True, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('enumeration_choices', models.TextField(default='', blank=True)),
                ('enumeration_open', models.BooleanField(default=False)),
                ('enumeration_multi', models.BooleanField(default=False)),
                ('enumeration_nullable', models.BooleanField(default=False)),
                ('category', models.ForeignKey(related_name='properties', blank=True, to='questionnaire.QScientificCategoryProxy', null=True)),
                ('component_proxy', models.ForeignKey(related_name='scientific_property_proxies', to='questionnaire.QComponentProxy')),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': 'Questionnaire Scientific Property Proxies',
                'verbose_name_plural': '_Questionnaire Proxies: Scientific Properties',
            },
        ),
        migrations.CreateModel(
            name='QSite',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(blank=True, max_length=128, choices=[(b'LOCAL', b'Local'), (b'TEST', b'Test'), (b'DEV', b'Development'), (b'PROD', b'Production')])),
                ('site', models.OneToOneField(related_name='q_site', to='sites.Site')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Site',
                'verbose_name_plural': 'Questionnaire Sites',
            },
        ),
        migrations.CreateModel(
            name='QStandardCategoryCustomization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(help_text=b"Be wary of changing a category's name; doing so deviates from a known controlled vocabulary and could confuse users.", max_length=256)),
                ('description', models.TextField(null=True, verbose_name=b'Category Description', blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('model_customization', models.ForeignKey(related_name='standard_category_customizations', to='questionnaire.QModelCustomization')),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
                'verbose_name': 'Questionnaire Standard Category Customization',
                'verbose_name_plural': '_Questionnaire Customizations: Standard Categories',
            },
        ),
        migrations.CreateModel(
            name='QStandardCategoryProxy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=256)),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('key', models.CharField(blank=True, max_length=256, validators=[Q.questionnaire.q_utils.ValidateNoSpaces()])),
                ('categorization', models.ForeignKey(related_name='category_proxies', to='questionnaire.QCategorization')),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': 'Questionnaire Standard Category Proxy',
                'verbose_name_plural': '_Questionnaire Proxies: Standard Categories',
            },
        ),
        migrations.CreateModel(
            name='QStandardProperty',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('field_type', models.CharField(max_length=128, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('is_label', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=128, blank=True)),
                ('atomic_value', models.CharField(max_length=1024, null=True, blank=True)),
                ('model', models.ForeignKey(related_name='standard_properties', to='questionnaire.QModel')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Standard Property Realization',
                'verbose_name_plural': '_Questionnaire Realizations: Standard Properties',
            },
        ),
        migrations.CreateModel(
            name='QStandardPropertyCustomization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=256)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('cardinality', Q.questionnaire.q_fields.QCardinalityField(default=b'0|1', max_length=8)),
                ('field_type', models.CharField(max_length=256, null=True, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('displayed', models.BooleanField(default=True, help_text='A property that is defined as required <em>in the CIM or a CV</em> must be displayed.', verbose_name=b'Should this property be displayed?')),
                ('required', models.BooleanField(default=True, help_text='All required properties must be completed prior to publication.  A property that is defined as required <em>in the CIM or a CV</em> cannot be made optional.', verbose_name=b'Is this property required?')),
                ('editable', models.BooleanField(default=True, verbose_name=b'Can the value of this property be edited?')),
                ('unique', models.BooleanField(default=False, verbose_name=b'Must the value of this property be unique?')),
                ('verbose_name', models.CharField(max_length=128, verbose_name=b'How should this property be labeled (overrides default name)?')),
                ('documentation', models.TextField(null=True, verbose_name="What is the help text to associate with this property?<div class='documentation'>Any initial help text comes from the CIM Schema or a CIM Controlled Vocabulary.</div><div class='documentation'>Note that basic HTML tags are supported.</div>", blank=True)),
                ('inline_help', models.BooleanField(default=False, verbose_name=b'Should the help text be displayed inline?')),
                ('inherited', models.BooleanField(default=False, help_text=b"Enabling inheritance will allow the corresponding properties of child components to 'inherit' the value of this property.  The editing form will allow users the ability to 'opt-out' of this inheritance.", verbose_name=b'Can this property be inherited by children?')),
                ('atomic_default', models.CharField(max_length=512, null=True, verbose_name="What is the default value of this property?<div class='documentation'>Note that this only applies to new and not existing documents</div>", blank=True)),
                ('atomic_type', models.CharField(default=b'DEFAULT', help_text=b'By default, all fields are rendered as strings.  However, a field can be customized to accept longer snippets of text, dates, email addresses, etc.', max_length=512, verbose_name=b'How should this field be rendered?', choices=[(b'DEFAULT', b'Character Field (default)'), (b'BOOLEAN', b'Boolean Field'), (b'DATE', b'Date Field'), (b'DATETIME', b'Date Time Field'), (b'DECIMAL', b'Decimal Field'), (b'EMAIL', b'Email Field'), (b'INTEGER', b'Integer Field'), (b'TEXT', b'Text Field (large block of text as opposed to a small string)'), (b'TIME', b'Time Field'), (b'URL', b'URL Field')])),
                ('atomic_suggestions', models.TextField(help_text=b'Please enter a "|" separated list of words or phrases.  (These suggestions will only take effect for text fields.)', null=True, verbose_name=b'Are there any suggestions you would like to offer as auto-completion options?', blank=True)),
                ('enumeration_choices', Q.questionnaire.q_fields.QEnumerationField(null=True, verbose_name=b'Choose the property values that should be presented to users.', blank=True)),
                ('enumeration_default', Q.questionnaire.q_fields.QEnumerationField(null=True, verbose_name=b'Choose the default value(s), if any, for this property.', blank=True)),
                ('enumeration_open', models.BooleanField(default=False, verbose_name=b'Check if a user can specify a custom property value.')),
                ('enumeration_multi', models.BooleanField(default=False, verbose_name=b'Check if a user can specify multiple property values.')),
                ('enumeration_nullable', models.BooleanField(default=False, verbose_name=b'Check if a user can specify an explicit <em>NONE</em> value.')),
                ('relationship_show_subform', models.BooleanField(default=False, help_text=b'Checking this will cause the property to be rendered as a nested subform within the parent form; All properties of this model will be available to view and edit in that subform.                                          Unchecking it will cause the attribute to be rendered as a simple <em>reference</em> widget.', verbose_name="Should this property be rendered in its own subform?<div class='documentation'>Note that a relationship to another CIM Document cannot use subforms, while a relationship to anything else must use subforms.</div>")),
                ('category', models.ForeignKey(related_name='standard_properties', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='questionnaire.QStandardCategoryCustomization', null=True)),
                ('model_customization', models.ForeignKey(related_name='standard_properties', to='questionnaire.QModelCustomization')),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
                'verbose_name': 'Questionnaire Standard Property Customization',
                'verbose_name_plural': '_Questionnaire Customizations: Standard Properties',
            },
        ),
        migrations.CreateModel(
            name='QStandardPropertyProxy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=256)),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('cardinality', Q.questionnaire.q_fields.QCardinalityField(default=b'0|1', max_length=8)),
                ('field_type', models.CharField(max_length=256, null=True, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('stereotype', models.CharField(blank=True, max_length=512, null=True, choices=[('attribute', b'attribute'), ('document', b'document')])),
                ('namespace', models.CharField(blank=True, max_length=512, null=True, choices=[('xsi', b'xsi'), ('gml', b'gml'), ('xlink', b'xlink'), ('gco', b'gco'), ('gmd', b'gmd')])),
                ('is_label', models.BooleanField(default=False)),
                ('atomic_default', models.CharField(max_length=512, null=True, blank=True)),
                ('atomic_type', models.CharField(blank=True, max_length=128, null=True, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('enumeration_choices', models.TextField(null=True, blank=True)),
                ('enumeration_open', models.BooleanField(default=False)),
                ('enumeration_multi', models.BooleanField(default=False)),
                ('enumeration_nullable', models.BooleanField(default=False)),
                ('relationship_target_name', models.CharField(max_length=512, null=True, blank=True)),
                ('model_proxy', models.ForeignKey(related_name='standard_properties', to='questionnaire.QModelProxy')),
                ('relationship_target_model', models.ForeignKey(blank=True, to='questionnaire.QModelProxy', null=True)),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': 'Questionnaire Standard Property Proxy',
                'verbose_name_plural': '_Questionnaire Proxies: Standard Properties',
            },
        ),
        migrations.CreateModel(
            name='QSynchronization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(unique=True, max_length=128, choices=[(b'CV_ADDED', b'Added CV'), (b'CV_REMOVED', b'Removed CV'), (b'CV_CHANGED', b'Changed CV'), (b'ONTOLOGY_ADDED', b'Added Ontology'), (b'ONTOLOGY_REMOVED', b'Removed Ontology'), (b'ONTOLOGY_CHANGED', b'Changed Ontology'), (b'CUSTOMIZATION_ADDED', b'Added Customization'), (b'CUSTOMIZATION_REMOVED', b'Removed Customization'), (b'CUSTOMIZATION_CHANGED', b'Changed Customization')])),
                ('description', models.TextField(null=True, blank=True)),
                ('priority', models.PositiveIntegerField(unique=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire (Un)Synchronization Type',
                'verbose_name_plural': 'Questionnaire (Un)Synchronization Types',
            },
        ),
        migrations.CreateModel(
            name='QTestModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128, validators=[Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoBadChars(), Q.questionnaire.q_utils.ValidateNoReservedWords()])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QUserProfile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('projects', models.ManyToManyField(to='questionnaire.QProject', verbose_name=b'Project Membership', blank=True)),
                ('user', models.OneToOneField(related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire User Profile',
                'verbose_name_plural': 'Questionnaire User Profiles',
            },
        ),
        migrations.CreateModel(
            name='QVocabulary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=128, validators=[Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoBadChars()])),
                ('version', Q.questionnaire.q_fields.QVersionField()),
                ('description', models.TextField(null=True, blank=True)),
                ('url', models.URLField()),
                ('document_type', models.CharField(max_length=128, choices=[(b'modelcomponent', b'modelcomponent'), (b'statisticalmodelcomponent', b'statisticalmodelcomponent'), (b'experiment', b'experiment'), (b'platform', b'platform')])),
                ('file', Q.questionnaire.q_fields.QFileField(help_text=b'Note that files with the same names will be overwritten', storage=Q.questionnaire.q_fields.OverwriteStorage(), upload_to=b'questionnaire/vocabularies', validators=[Q.questionnaire.models.models_vocabularies.validate_vocabulary_file_extension, Q.questionnaire.models.models_vocabularies.validate_vocabulary_file_schema])),
                ('is_registered', models.BooleanField(default=False)),
                ('last_registered_version', Q.questionnaire.q_fields.QVersionField(null=True, blank=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
                'verbose_name': 'Questionnaire Vocabulary',
                'verbose_name_plural': 'Questionnaire Vocabularies',
            },
        ),
        migrations.AlterUniqueTogether(
            name='qvocabulary',
            unique_together=set([('name', 'version')]),
        ),
        migrations.AddField(
            model_name='qstandardpropertycustomization',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QStandardPropertyProxy'),
        ),
        migrations.AddField(
            model_name='qstandardpropertycustomization',
            name='relationship_subform_customization',
            field=models.ForeignKey(related_name='property_customizer', blank=True, to='questionnaire.QModelCustomization', null=True),
        ),
        migrations.AddField(
            model_name='qstandardproperty',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QStandardPropertyProxy'),
        ),
        migrations.AddField(
            model_name='qstandardcategoryproxy',
            name='properties',
            field=models.ManyToManyField(related_name='category', to='questionnaire.QStandardPropertyProxy', blank=True),
        ),
        migrations.AddField(
            model_name='qstandardcategorycustomization',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QStandardCategoryProxy'),
        ),
        migrations.AddField(
            model_name='qscientificpropertycustomization',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QScientificPropertyProxy'),
        ),
        migrations.AddField(
            model_name='qscientificcategorycustomization',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QScientificCategoryProxy'),
        ),
        migrations.AddField(
            model_name='qprojectvocabulary',
            name='vocabulary',
            field=models.ForeignKey(related_name='+', to='questionnaire.QVocabulary'),
        ),
        migrations.AddField(
            model_name='qproject',
            name='vocabularies',
            field=models.ManyToManyField(help_text=b'Only registered vocabularies can be added to projects.', to='questionnaire.QVocabulary', through='questionnaire.QProjectVocabulary', blank=True),
        ),
        migrations.AddField(
            model_name='qmodelproxy',
            name='ontology',
            field=models.ForeignKey(related_name='model_proxies', to='questionnaire.QOntology'),
        ),
        migrations.AddField(
            model_name='qmodelcustomizationvocabulary',
            name='vocabulary',
            field=models.ForeignKey(related_name='link_to_vocabulary', to='questionnaire.QVocabulary'),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='ontology',
            field=models.ForeignKey(related_name='model_customizations', to='questionnaire.QOntology'),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='project',
            field=models.ForeignKey(related_name='model_customizations', to='questionnaire.QProject'),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='proxy',
            field=models.ForeignKey(related_name='model_customizations', to='questionnaire.QModelProxy'),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='synchronization',
            field=models.ManyToManyField(to='questionnaire.QSynchronization', blank=True),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='vocabularies',
            field=models.ManyToManyField(related_name='model_customizer', to='questionnaire.QVocabulary', through='questionnaire.QModelCustomizationVocabulary', blank=True, help_text='<p>These are the CVs that are associated with this document type and project.</p><p>Clicking on <strong>&quot;active&quot;</strong> will enable or disable all of the properties contained within a CV.</p><p>Dragging-and-dropping a CV will change the order in which it appears in the Editor.</p>', verbose_name=b'Vocabularies to include'),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='ontology',
            field=models.ForeignKey(related_name='models', to='questionnaire.QOntology'),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='parent',
            field=mptt.fields.TreeForeignKey(related_name='children', blank=True, to='questionnaire.QModel', null=True),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='project',
            field=models.ForeignKey(related_name='models', to='questionnaire.QProject'),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='proxy',
            field=models.ForeignKey(related_name='models', to='questionnaire.QModelProxy'),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='synchronization',
            field=models.ManyToManyField(to='questionnaire.QSynchronization', blank=True),
        ),
        migrations.AddField(
            model_name='qcomponentproxy',
            name='vocabulary',
            field=models.ForeignKey(related_name='component_proxies', to='questionnaire.QVocabulary'),
        ),
        migrations.AlterUniqueTogether(
            name='qcategorization',
            unique_together=set([('name', 'version')]),
        ),
        migrations.AddField(
            model_name='metadatastandardproperty',
            name='proxy',
            field=models.ForeignKey(blank=True, to='questionnaire.QStandardPropertyProxy', null=True),
        ),
        migrations.AddField(
            model_name='metadatastandardproperty',
            name='relationship_value',
            field=models.ManyToManyField(to='questionnaire.MetadataModel', blank=True),
        ),
        migrations.AddField(
            model_name='metadatascientificproperty',
            name='proxy',
            field=models.ForeignKey(blank=True, to='questionnaire.QScientificPropertyProxy', null=True),
        ),
        migrations.AddField(
            model_name='metadatamodel',
            name='project',
            field=models.ForeignKey(related_name='models_bak', blank=True, to='questionnaire.QProject', null=True),
        ),
        migrations.AddField(
            model_name='metadatamodel',
            name='proxy',
            field=models.ForeignKey(related_name='models_bak', to='questionnaire.QModelProxy', null=True),
        ),
        migrations.AddField(
            model_name='metadatamodel',
            name='version',
            field=models.ForeignKey(related_name='models_bak', to='questionnaire.QOntology', null=True),
        ),
        migrations.AlterUniqueTogether(
            name='qstandardpropertyproxy',
            unique_together=set([('model_proxy', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='qstandardcategoryproxy',
            unique_together=set([('categorization', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='qscientificpropertyproxy',
            unique_together=set([('component_proxy', 'category', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='qscientificcategoryproxy',
            unique_together=set([('component_proxy', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='qprojectvocabulary',
            unique_together=set([('project', 'vocabulary')]),
        ),
        migrations.AlterUniqueTogether(
            name='qontology',
            unique_together=set([('name', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='qmodelcustomizationvocabulary',
            unique_together=set([('model_customization', 'vocabulary')]),
        ),
        migrations.AlterUniqueTogether(
            name='qcomponentproxy',
            unique_together=set([('vocabulary', 'name')]),
        ),
    ]
