# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import Q.questionnaire.models.models_ontologies
import Q.questionnaire.q_utils
import Q.questionnaire.q_fields
import mptt.fields
from django.conf import settings
import django.db.models.deletion
import Q.questionnaire.models.models_projects
import Q.questionnaire.models.models_categorizations
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='QCategorization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128)),
                ('version', Q.questionnaire.q_fields.QVersionField(null=True, blank=True)),
                ('description', models.TextField(help_text=b'This may be overwritten by any descriptive text found in the categorization file.', null=True, blank=True)),
                ('file', Q.questionnaire.q_fields.QFileField(help_text=b'Note that files with the same names will be overwritten', storage=Q.questionnaire.q_fields.OverwriteStorage(), upload_to=b'questionnaire/categorizations', validators=[Q.questionnaire.models.models_categorizations.validate_categorization_file_extension, Q.questionnaire.models.models_categorizations.validate_categorization_file_schema])),
                ('is_registered', models.BooleanField(default=False)),
                ('last_registered_version', Q.questionnaire.q_fields.QVersionField(null=True, blank=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
                'verbose_name': 'Questionnaire Categorization',
                'verbose_name_plural': 'Questionnaire Categorizations',
            },
        ),
        migrations.CreateModel(
            name='QCategoryCustomization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'A unique name for this customization.  Spaces or the following characters are not allowed: "\\, /, <, >, %, #, %, {, }, [, ], $, |".', max_length=128, verbose_name=b'Customization Name', validators=[Q.questionnaire.q_utils.ValidateNoBadChars(), Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoReservedWords(), Q.questionnaire.q_utils.ValidateNoProfanities()])),
                ('category_title', models.CharField(max_length=64, validators=[Q.questionnaire.q_utils.ValidateNoProfanities()])),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': '_Questionnaire Customization: Category',
                'verbose_name_plural': '_Questionnaire Customizations: Categories',
            },
        ),
        migrations.CreateModel(
            name='QCategoryProxy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256)),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('is_specialized', models.BooleanField(default=False)),
                ('categorization', models.ForeignKey(related_name='category_proxies', to='questionnaire.QCategorization')),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': '_Questionnaire Proxy: Category',
                'verbose_name_plural': '_Questionnaire Proxies: Categories',
            },
        ),
        migrations.CreateModel(
            name='QInstitute',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(null=True, blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'verbose_name': 'Questionnaire Institute',
                'verbose_name_plural': 'Questionnaire Institutes',
            },
        ),
        migrations.CreateModel(
            name='QModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, blank=True)),
                ('description', models.TextField(blank=True)),
                ('version', Q.questionnaire.q_fields.QVersionField(null=True, blank=True)),
                ('is_document', models.BooleanField(default=False)),
                ('is_root', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
                'verbose_name': 'Questionnaire Realization: Model',
                'verbose_name_plural': '_Questionnaire Realizations: Models',
            },
        ),
        migrations.CreateModel(
            name='QModelCustomization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'A unique name for this customization.  Spaces or the following characters are not allowed: "\\, /, <, >, %, #, %, {, }, [, ], $, |".', max_length=128, verbose_name=b'Customization Name', validators=[Q.questionnaire.q_utils.ValidateNoBadChars(), Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoReservedWords(), Q.questionnaire.q_utils.ValidateNoProfanities()])),
                ('description', models.TextField(help_text=b'An explanation of how this customization is intended to be used. This information is for informational purposes only.', verbose_name=b'Customization Description', blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('is_default', models.BooleanField(default=False, help_text=b'Every CIM Document Type must have one default customization. If this is the first customization you are creating, please ensure this checkbox is selected.', verbose_name=b'Is Default Customization?')),
                ('model_title', models.CharField(max_length=512, null=True, verbose_name=b'Name that should appear on the Document Form')),
                ('model_description', models.TextField(help_text=b'This text will appear as documentation in the editing form.  Inline HTML formatting is permitted.  The initial documentation comes from the ontology.', null=True, verbose_name=b'A description of the document', blank=True)),
                ('model_show_all_categories', models.BooleanField(default=False, help_text=b'Include categories in the editing form for which there are no (visible) properties associated with', verbose_name=b'Display empty categories?')),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': '_Questionnaire Customization: Model',
                'verbose_name_plural': '_Questionnaire Customizations: Models',
            },
        ),
        migrations.CreateModel(
            name='QModelProxy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256)),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('is_specialized', models.BooleanField(default=False)),
                ('package', models.CharField(max_length=256, null=True, blank=True)),
                ('stereotype', models.CharField(blank=True, max_length=512, null=True, choices=[('document', b'document')])),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': '_Questionnaire Proxy: Model',
                'verbose_name_plural': '_Questionnaire Proxies: Models',
            },
        ),
        migrations.CreateModel(
            name='QModelThing',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, verbose_name=b'Customization Name', validators=[Q.questionnaire.q_utils.ValidateNoBadChars(), Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoReservedWords(), Q.questionnaire.q_utils.ValidateNoProfanities()])),
                ('model_title', models.CharField(max_length=512, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': '_Questionnaire Model Thing (testing only)',
                'verbose_name_plural': '_Questionnaire Model Things (testing only)',
            },
        ),
        migrations.CreateModel(
            name='QOntology',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('ontology_type', models.CharField(default=b'SPECIALIZATION', max_length=256, choices=[(b'SCHEMA', b'Schema (ie: CIM2)'), (b'SPECIALIZATION', b'Specialization (ie: CMIP6)')])),
                ('file', Q.questionnaire.q_fields.QFileField(help_text=b'Note that files with the same names will be overwritten', storage=Q.questionnaire.q_fields.OverwriteStorage(), upload_to=b'questionnaire/ontologies', validators=[Q.questionnaire.models.models_ontologies.validate_ontology_file_extension, Q.questionnaire.models.models_ontologies.validate_ontology_file_schema])),
                ('name', models.CharField(max_length=128, validators=[Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoBadChars()])),
                ('version', Q.questionnaire.q_fields.QVersionField()),
                ('url', models.URLField()),
                ('description', models.TextField(help_text=b'This may be overwritten by any descriptive text found in the QXML file.', null=True, blank=True)),
                ('key', models.CharField(max_length=256, editable=False)),
                ('is_registered', models.BooleanField(default=False)),
                ('last_registered_version', Q.questionnaire.q_fields.QVersionField(null=True, blank=True)),
                ('categorization', models.ForeignKey(related_name='ontologies', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='questionnaire.QCategorization', null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Ontology',
                'verbose_name_plural': 'Questionnaire Ontologies',
            },
        ),
        migrations.CreateModel(
            name='QProject',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128, validators=[Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoBadChars(), Q.questionnaire.q_utils.ValidateNoReservedWords()])),
                ('title', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True)),
                ('email', models.EmailField(max_length=254, verbose_name=b'Contact Email')),
                ('url', models.URLField(blank=True)),
                ('logo', models.ImageField(help_text=b'All images will be resized to 96 x 96.', storage=Q.questionnaire.q_fields.OverwriteStorage(), null=True, upload_to=Q.questionnaire.models.models_projects.generate_upload_to, blank=True)),
                ('display_logo', models.BooleanField(default=False)),
                ('authenticated', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_displayed', models.BooleanField(default=True, help_text=b'A project that is not displayed is not included in the Index Page, although users can still navigate to it if they know its URL')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Project',
                'verbose_name_plural': 'Questionnaire Projects',
            },
        ),
        migrations.CreateModel(
            name='QProjectOntology',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ontology', models.ForeignKey(related_name='+', to='questionnaire.QOntology')),
                ('project', models.ForeignKey(related_name='+', to='questionnaire.QProject')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Project Ontology',
                'verbose_name_plural': 'Questionnaire Project Ontologies',
            },
        ),
        migrations.CreateModel(
            name='QProperty',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('field_type', models.CharField(max_length=512, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('cardinality', Q.questionnaire.q_fields.QCardinalityField(default=b'0|1', max_length=8)),
                ('is_complete', models.BooleanField(default=False)),
                ('atomic_value', models.TextField(null=True, blank=True)),
                ('enumeration_value', Q.questionnaire.q_fields.QEnumerationField(null=True)),
                ('enumeration_other_value', models.CharField(max_length=1024, null=True, blank=True)),
                ('is_nil', models.BooleanField(default=False)),
                ('nil_reason', models.CharField(default=b'UNKNOWN', max_length=512, choices=[(b'UNKNOWN', b'The correct value is not known, and not computable by, the sender of this data.  However, a correct value probably exists.'), (b'MISSING', b'The correct value is not readily available to the sender of this data. Furthermore, a correct value may not exist.'), (b'INAPPLICABLE', b'There is no value.'), (b'TEMPLATE', b'The value will be available later.'), (b'WITHHELD', b'The value is not divulged.')])),
                ('model', models.ForeignKey(related_name='properties', to='questionnaire.QModel')),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': 'Questionnaire Realization: Property',
                'verbose_name_plural': '_Questionnaire Realizations: Properties',
            },
        ),
        migrations.CreateModel(
            name='QPropertyCustomization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'A unique name for this customization.  Spaces or the following characters are not allowed: "\\, /, <, >, %, #, %, {, }, [, ], $, |".', max_length=128, verbose_name=b'Customization Name', validators=[Q.questionnaire.q_utils.ValidateNoBadChars(), Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoReservedWords(), Q.questionnaire.q_utils.ValidateNoProfanities()])),
                ('property_title', models.CharField(max_length=128, validators=[Q.questionnaire.q_utils.ValidateNoProfanities()])),
                ('is_required', models.BooleanField(default=True, help_text='All required properties must be completed prior to publication.  A property that is defined as required <em>in the CIM or a CV</em> cannot be made optional.', verbose_name=b'Is this property required?')),
                ('is_hidden', models.BooleanField(default=True, help_text='A property that is defined as required in an ontology cannot be hidden.', verbose_name=b'Should this property <u>not</u> be displayed?')),
                ('is_editable', models.BooleanField(default=True, verbose_name=b'Can this property be edited?')),
                ('is_nillable', models.BooleanField(default=True, help_text=b'A nillable property can be intentionally left blank for several reasons: Unknown, Missing, Inapplicable, Template, Withheld.', verbose_name=b'Should <i>nillable</i> options be allowed?')),
                ('documentation', models.TextField(null=True, verbose_name="What is the help text to associate with this property?<div class='documentation'>Any initial help text comes from the CIM Schema or a CIM Controlled Vocabulary.</div><div class='documentation'>Note that basic HTML tags are supported.</div>", blank=True)),
                ('inline_help', models.BooleanField(default=False, verbose_name=b'Should the help text be displayed inline?')),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('field_type', models.CharField(max_length=512, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('atomic_default', models.CharField(max_length=512, null=True, verbose_name="What is the default value of this property?<div class='documentation'>Note that this only applies to new and not existing documents</div>", blank=True)),
                ('atomic_type', models.CharField(default=b'DEFAULT', help_text=b'By default, all fields are rendered as strings.  However, a field can be customized to accept longer snippets of text, dates, email addresses, etc.', max_length=512, verbose_name=b'How should this field be rendered?', choices=[(b'DEFAULT', b'Character Field (default)'), (b'BOOLEAN', b'Boolean Field'), (b'DATE', b'Date Field'), (b'DATETIME', b'Date Time Field'), (b'DECIMAL', b'Decimal Field'), (b'EMAIL', b'Email Field'), (b'INTEGER', b'Integer Field'), (b'TEXT', b'Text Field (large block of text as opposed to a small string)'), (b'TIME', b'Time Field'), (b'URL', b'URL Field')])),
                ('atomic_suggestions', models.TextField(blank=True, help_text=b'Please enter a "|" separated list of words or phrases.  (These suggestions will only take effect for text fields.)', null=True, verbose_name=b'Are there any suggestions you would like to offer as auto-completion options?', validators=[Q.questionnaire.q_utils.ValidateNoBadSuggestionChars()])),
                ('enumeration_open', models.BooleanField(default=False, verbose_name=b'Can a user can specify a custom "OTHER" value?')),
                ('relationship_show_subform', models.BooleanField(default=False, help_text='Checking this will cause the property to be rendered as a nested subform within the parent form;All properties of this model will be available to view and edit in that subform.Unchecking it will cause the attribute to be rendered as a <em>reference</em> widget.', verbose_name="Should this property be rendered in its own subform?<div class='documentation'>Note that a relationship to another CIM Document cannot use subforms, while a relationship to anything else must use subforms.</div>")),
                ('category', models.ForeignKey(related_name='property_customizations', blank=True, to='questionnaire.QCategoryCustomization', null=True)),
                ('model_customization', models.ForeignKey(related_name='property_customizations', to='questionnaire.QModelCustomization')),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': '_Questionnaire Customization: Property',
                'verbose_name_plural': '_Questionnaire Customizations: Properties',
            },
        ),
        migrations.CreateModel(
            name='QPropertyProxy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256)),
                ('documentation', models.TextField(null=True, blank=True)),
                ('order', models.PositiveIntegerField(null=True, blank=True)),
                ('is_specialized', models.BooleanField(default=False)),
                ('stereotype', models.CharField(blank=True, max_length=512, null=True, choices=[('attribute', b'attribute'), ('document', b'document')])),
                ('cardinality', Q.questionnaire.q_fields.QCardinalityField(default=b'0|1', max_length=8)),
                ('is_nillable', models.BooleanField(default=True)),
                ('field_type', models.CharField(max_length=256, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('atomic_default', models.CharField(max_length=512, null=True, blank=True)),
                ('atomic_type', models.CharField(default=b'DEFAULT', max_length=256, choices=[(b'DEFAULT', b'Character Field (default)'), (b'BOOLEAN', b'Boolean Field'), (b'DATE', b'Date Field'), (b'DATETIME', b'Date Time Field'), (b'DECIMAL', b'Decimal Field'), (b'EMAIL', b'Email Field'), (b'INTEGER', b'Integer Field'), (b'TEXT', b'Text Field (large block of text as opposed to a small string)'), (b'TIME', b'Time Field'), (b'URL', b'URL Field')])),
                ('enumeration', Q.questionnaire.q_fields.QJSONField(null=True, blank=True)),
                ('enumeration_open', models.BooleanField(default=False)),
                ('enumeration_multi', models.BooleanField(default=False)),
                ('relationship_target_names', models.TextField(default=b'')),
                ('category', models.ForeignKey(related_name='property_proxies', blank=True, to='questionnaire.QCategoryProxy', null=True)),
                ('model_proxy', models.ForeignKey(related_name='property_proxies', to='questionnaire.QModelProxy')),
                ('relationship_target_models', models.ManyToManyField(related_name='parent_property_proxies', to='questionnaire.QModelProxy', blank=True)),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': '_Questionnaire Proxy: Property',
                'verbose_name_plural': '_Questionnaire Proxies: Properties',
            },
        ),
        migrations.CreateModel(
            name='QPropertyThing',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, verbose_name=b'Customization Name', validators=[Q.questionnaire.q_utils.ValidateNoBadChars(), Q.questionnaire.q_utils.ValidateNoSpaces(), Q.questionnaire.q_utils.ValidateNoReservedWords(), Q.questionnaire.q_utils.ValidateNoProfanities()])),
                ('property_title', models.CharField(max_length=128, validators=[Q.questionnaire.q_utils.ValidateNoProfanities()])),
                ('field_type', models.CharField(max_length=512, choices=[(b'ATOMIC', b'Atomic'), (b'RELATIONSHIP', b'Relationship'), (b'ENUMERATION', b'Enumeration')])),
                ('relationship_show_subform', models.BooleanField(default=False)),
                ('model_customization', models.ForeignKey(related_name='property_customizations', to='questionnaire.QModelThing')),
                ('proxy', models.ForeignKey(to='questionnaire.QPropertyProxy')),
            ],
            options={
                'abstract': False,
                'verbose_name': '_Questionnaire Property Thing (testing only)',
                'verbose_name_plural': '_Questionnaire Property Thing (testing only)',
            },
        ),
        migrations.CreateModel(
            name='QPublication',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.UUIDField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('version', Q.questionnaire.q_fields.QVersionField()),
                ('format', models.CharField(max_length=128, choices=[(b'CIM2_XML', b'CIM2 XML')])),
                ('content', models.TextField()),
                ('model', models.ForeignKey(related_name='publications', to='questionnaire.QModel')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Publication',
                'verbose_name_plural': 'Questionnaire Publications',
            },
        ),
        migrations.CreateModel(
            name='QSite',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(blank=True, max_length=128, choices=[(b'LOCAL', b'Local'), (b'TEST', b'Test'), (b'DEV', b'Development'), (b'PROD', b'Production')])),
                ('site', models.OneToOneField(related_name='q_site', to='sites.Site')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire Site',
                'verbose_name_plural': 'Questionnaire Sites',
            },
        ),
        migrations.CreateModel(
            name='QSynchronization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(unique=True, max_length=128, choices=[(b'CV_ADDED', b'Added CV'), (b'CV_REMOVED', b'Removed CV'), (b'CV_CHANGED', b'Changed CV'), (b'ONTOLOGY_ADDED', b'Added Ontology'), (b'ONTOLOGY_REMOVED', b'Removed Ontology'), (b'ONTOLOGY_CHANGED', b'Changed Ontology'), (b'CUSTOMIZATION_ADDED', b'Added Customization'), (b'CUSTOMIZATION_REMOVED', b'Removed Customization'), (b'CUSTOMIZATION_CHANGED', b'Changed Customization')])),
                ('description', models.TextField(null=True, blank=True)),
                ('priority', models.PositiveIntegerField(unique=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire (Un)Synchronization Type',
                'verbose_name_plural': 'Questionnaire (Un)Synchronization Types',
            },
        ),
        migrations.CreateModel(
            name='QUserProfile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('institute', models.ForeignKey(verbose_name=b'Institution', blank=True, to='questionnaire.QInstitute', null=True)),
                ('projects', models.ManyToManyField(to='questionnaire.QProject', verbose_name=b'Project Membership', blank=True)),
                ('user', models.OneToOneField(related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Questionnaire User Profile',
                'verbose_name_plural': 'Questionnaire User Profiles',
            },
        ),
        migrations.AddField(
            model_name='qpropertycustomization',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QPropertyProxy'),
        ),
        migrations.AddField(
            model_name='qproperty',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QPropertyProxy'),
        ),
        migrations.AddField(
            model_name='qproject',
            name='ontologies',
            field=models.ManyToManyField(help_text=b'Only registered ontologies (schemas or specializations) can be added to projects.', to='questionnaire.QOntology', through='questionnaire.QProjectOntology', blank=True),
        ),
        migrations.AddField(
            model_name='qmodelthing',
            name='ontology',
            field=models.ForeignKey(to='questionnaire.QOntology'),
        ),
        migrations.AddField(
            model_name='qmodelthing',
            name='project',
            field=models.ForeignKey(related_name='model_things', to='questionnaire.QProject'),
        ),
        migrations.AddField(
            model_name='qmodelthing',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QModelProxy'),
        ),
        migrations.AddField(
            model_name='qmodelthing',
            name='relationship_source_property_customization',
            field=models.ForeignKey(related_name='relationship_target_model_customizations', blank=True, to='questionnaire.QPropertyThing', null=True),
        ),
        migrations.AddField(
            model_name='qmodelproxy',
            name='ontology',
            field=models.ForeignKey(related_name='model_proxies', to='questionnaire.QOntology'),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='ontology',
            field=models.ForeignKey(to='questionnaire.QOntology'),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='owner',
            field=models.ForeignKey(related_name='owned_customizations', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='project',
            field=models.ForeignKey(related_name='model_customizations', to='questionnaire.QProject'),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QModelProxy'),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='relationship_source_property_customization',
            field=models.ForeignKey(related_name='relationship_target_model_customizations', blank=True, to='questionnaire.QPropertyCustomization', null=True),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='shared_owners',
            field=models.ManyToManyField(related_name='shared_customizations', to=settings.AUTH_USER_MODEL, blank=True),
        ),
        migrations.AddField(
            model_name='qmodelcustomization',
            name='synchronization',
            field=models.ManyToManyField(to='questionnaire.QSynchronization', blank=True),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='ontology',
            field=models.ForeignKey(related_name='models', to='questionnaire.QOntology'),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='owner',
            field=models.ForeignKey(related_name='owned_models', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='parent',
            field=mptt.fields.TreeForeignKey(related_name='children', blank=True, to='questionnaire.QModel', null=True),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='project',
            field=models.ForeignKey(related_name='models', to='questionnaire.QProject'),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='proxy',
            field=models.ForeignKey(related_name='models', to='questionnaire.QModelProxy'),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='relationship_property',
            field=models.ForeignKey(related_name='relationship_values', blank=True, to='questionnaire.QProperty', null=True),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='shared_owners',
            field=models.ManyToManyField(related_name='shared_models', to=settings.AUTH_USER_MODEL, blank=True),
        ),
        migrations.AddField(
            model_name='qmodel',
            name='synchronization',
            field=models.ManyToManyField(to='questionnaire.QSynchronization', blank=True),
        ),
        migrations.AddField(
            model_name='qcategorycustomization',
            name='model_customization',
            field=models.ForeignKey(related_name='category_customizations', to='questionnaire.QModelCustomization'),
        ),
        migrations.AddField(
            model_name='qcategorycustomization',
            name='proxy',
            field=models.ForeignKey(to='questionnaire.QCategoryProxy'),
        ),
        migrations.AlterUniqueTogether(
            name='qcategorization',
            unique_together=set([('name', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='qpublication',
            unique_together=set([('name', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='qprojectontology',
            unique_together=set([('project', 'ontology')]),
        ),
        migrations.AlterUniqueTogether(
            name='qontology',
            unique_together=set([('name', 'version')]),
        ),
    ]
